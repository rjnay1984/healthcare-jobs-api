// <auto-generated />
using System;
using HealthcareJobs.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace HealthcareJobs.Infrastructure.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20251013022029_RemoveUserEntity")]
    partial class RemoveUserEntity
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CandidateCertification", b =>
                {
                    b.Property<Guid>("CandidatesId")
                        .HasColumnType("uuid");

                    b.Property<int>("CertificationsId")
                        .HasColumnType("integer");

                    b.HasKey("CandidatesId", "CertificationsId");

                    b.HasIndex("CertificationsId");

                    b.ToTable("CandidateCertification");
                });

            modelBuilder.Entity("CandidateSpecialty", b =>
                {
                    b.Property<Guid>("CandidatesId")
                        .HasColumnType("uuid");

                    b.Property<int>("SpecialtiesId")
                        .HasColumnType("integer");

                    b.HasKey("CandidatesId", "SpecialtiesId");

                    b.HasIndex("SpecialtiesId");

                    b.ToTable("CandidateSpecialty");
                });

            modelBuilder.Entity("CertificationJobPosting", b =>
                {
                    b.Property<Guid>("JobPostingsId")
                        .HasColumnType("uuid");

                    b.Property<int>("RequiredCertificationsId")
                        .HasColumnType("integer");

                    b.HasKey("JobPostingsId", "RequiredCertificationsId");

                    b.HasIndex("RequiredCertificationsId");

                    b.ToTable("CertificationJobPosting");
                });

            modelBuilder.Entity("HealthcareJobs.Core.Entities.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("Id");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("HealthcareJobs.Core.Entities.Candidate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AuthUserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal?>("DesiredSalaryMin")
                        .HasColumnType("numeric");

                    b.Property<int>("ExperienceLevel")
                        .HasColumnType("integer");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("LicenseExpiry")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LicenseNumber")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int?>("LicenseType")
                        .HasColumnType("integer");

                    b.Property<string>("ResumeUrl")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("WillRelocate")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("AuthUserId")
                        .IsUnique();

                    b.ToTable("Candidates");
                });

            modelBuilder.Entity("HealthcareJobs.Core.Entities.Certification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Certifications");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Epic Certified",
                            Type = 1
                        },
                        new
                        {
                            Id = 2,
                            Name = "Cerner Certified",
                            Type = 1
                        },
                        new
                        {
                            Id = 3,
                            Name = "CISSP",
                            Type = 3
                        },
                        new
                        {
                            Id = 4,
                            Name = "CISA",
                            Type = 3
                        },
                        new
                        {
                            Id = 5,
                            Name = "RN License",
                            Type = 2
                        },
                        new
                        {
                            Id = 6,
                            Name = "RHIA",
                            Type = 2
                        });
                });

            modelBuilder.Entity("HealthcareJobs.Core.Entities.Employer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AuthUserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("CompanyAddressId")
                        .HasColumnType("uuid");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsHIPAACompliant")
                        .HasColumnType("boolean");

                    b.Property<string>("NPINumber")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<int>("OrganizationType")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Website")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.HasKey("Id");

                    b.HasIndex("AuthUserId")
                        .IsUnique();

                    b.HasIndex("CompanyAddressId");

                    b.ToTable("Employers");
                });

            modelBuilder.Entity("HealthcareJobs.Core.Entities.JobApplication", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("AppliedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CandidateId")
                        .HasColumnType("uuid");

                    b.Property<string>("CoverLetter")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("JobPostingId")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("JobPostingId");

                    b.HasIndex("CandidateId", "JobPostingId")
                        .IsUnique();

                    b.ToTable("JobApplications");
                });

            modelBuilder.Entity("HealthcareJobs.Core.Entities.JobPosting", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("EmployerId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ExpiresAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsRemote")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("JobLocationId")
                        .HasColumnType("uuid");

                    b.Property<int>("MinExperience")
                        .HasColumnType("integer");

                    b.Property<DateTime>("PostedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("RequiresLicense")
                        .HasColumnType("boolean");

                    b.Property<decimal?>("SalaryMax")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("SalaryMin")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("EmployerId");

                    b.HasIndex("JobLocationId");

                    b.HasIndex("PostedAt");

                    b.HasIndex("Status");

                    b.ToTable("JobPostings");
                });

            modelBuilder.Entity("HealthcareJobs.Core.Entities.Specialty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Category")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Specialties");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Category = 2,
                            Name = "Electronic Health Records"
                        },
                        new
                        {
                            Id = 2,
                            Category = 2,
                            Name = "Health Information Systems"
                        },
                        new
                        {
                            Id = 3,
                            Category = 2,
                            Name = "Clinical Data Analytics"
                        },
                        new
                        {
                            Id = 4,
                            Category = 1,
                            Name = "Cardiology"
                        },
                        new
                        {
                            Id = 5,
                            Category = 1,
                            Name = "Radiology"
                        },
                        new
                        {
                            Id = 6,
                            Category = 3,
                            Name = "Healthcare Administration"
                        });
                });

            modelBuilder.Entity("JobPostingSpecialty", b =>
                {
                    b.Property<Guid>("JobPostingsId")
                        .HasColumnType("uuid");

                    b.Property<int>("RequiredSpecialtiesId")
                        .HasColumnType("integer");

                    b.HasKey("JobPostingsId", "RequiredSpecialtiesId");

                    b.HasIndex("RequiredSpecialtiesId");

                    b.ToTable("JobPostingSpecialty");
                });

            modelBuilder.Entity("CandidateCertification", b =>
                {
                    b.HasOne("HealthcareJobs.Core.Entities.Candidate", null)
                        .WithMany()
                        .HasForeignKey("CandidatesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HealthcareJobs.Core.Entities.Certification", null)
                        .WithMany()
                        .HasForeignKey("CertificationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CandidateSpecialty", b =>
                {
                    b.HasOne("HealthcareJobs.Core.Entities.Candidate", null)
                        .WithMany()
                        .HasForeignKey("CandidatesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HealthcareJobs.Core.Entities.Specialty", null)
                        .WithMany()
                        .HasForeignKey("SpecialtiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CertificationJobPosting", b =>
                {
                    b.HasOne("HealthcareJobs.Core.Entities.JobPosting", null)
                        .WithMany()
                        .HasForeignKey("JobPostingsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HealthcareJobs.Core.Entities.Certification", null)
                        .WithMany()
                        .HasForeignKey("RequiredCertificationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HealthcareJobs.Core.Entities.Employer", b =>
                {
                    b.HasOne("HealthcareJobs.Core.Entities.Address", "CompanyAddress")
                        .WithMany()
                        .HasForeignKey("CompanyAddressId");

                    b.Navigation("CompanyAddress");
                });

            modelBuilder.Entity("HealthcareJobs.Core.Entities.JobApplication", b =>
                {
                    b.HasOne("HealthcareJobs.Core.Entities.Candidate", "Candidate")
                        .WithMany("JobApplications")
                        .HasForeignKey("CandidateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HealthcareJobs.Core.Entities.JobPosting", "JobPosting")
                        .WithMany("JobApplications")
                        .HasForeignKey("JobPostingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Candidate");

                    b.Navigation("JobPosting");
                });

            modelBuilder.Entity("HealthcareJobs.Core.Entities.JobPosting", b =>
                {
                    b.HasOne("HealthcareJobs.Core.Entities.Employer", "Employer")
                        .WithMany("JobPostings")
                        .HasForeignKey("EmployerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HealthcareJobs.Core.Entities.Address", "JobLocation")
                        .WithMany()
                        .HasForeignKey("JobLocationId");

                    b.Navigation("Employer");

                    b.Navigation("JobLocation");
                });

            modelBuilder.Entity("JobPostingSpecialty", b =>
                {
                    b.HasOne("HealthcareJobs.Core.Entities.JobPosting", null)
                        .WithMany()
                        .HasForeignKey("JobPostingsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HealthcareJobs.Core.Entities.Specialty", null)
                        .WithMany()
                        .HasForeignKey("RequiredSpecialtiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HealthcareJobs.Core.Entities.Candidate", b =>
                {
                    b.Navigation("JobApplications");
                });

            modelBuilder.Entity("HealthcareJobs.Core.Entities.Employer", b =>
                {
                    b.Navigation("JobPostings");
                });

            modelBuilder.Entity("HealthcareJobs.Core.Entities.JobPosting", b =>
                {
                    b.Navigation("JobApplications");
                });
#pragma warning restore 612, 618
        }
    }
}
